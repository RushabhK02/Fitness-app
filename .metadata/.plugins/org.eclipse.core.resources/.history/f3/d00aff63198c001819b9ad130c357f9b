package com.f2f.app.service;

import com.f2f.app.constants.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.f2f.app.models.*;
import com.f2f.app.repositories.*;

@Transactional
@Service
public class UserServiceImpl implements UserService {
	private static Logger logger = LogManager.getLogger();
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private AllotmentRepository allotmentRepository;
	@Autowired
	private UserWorkoutRecordRepository userWorkoutRecordRepository;
	@Autowired
	private UserDietRecordRepository userDietRecordRepository;
	@Autowired
	private PlanDetailRepository planDetailRepository;
	@Autowired
	private PlanRepository planRepository;
	@Autowired
	private AdminService adminService;

	@Override
	public User signup(User newUser) {
		logger.info("Running UserService.signup: adding user: " + newUser.getUsername());
		userRepository.save(newUser);
		adminService.addClient(1, newUser.getUserId());
		User user = userRepository.findByUsername(newUser.getUsername());
		if (user.getUserId() > 0) {
			logger.info("Running UserService.signup: Registered user: " + newUser.getUsername());
			return user;
		} else {
			logger.error("UserService.signup : cannot register user: " + newUser.getUsername());
			return null;
		}
	}

	@Override
	public Boolean firstAllotment(int userId, AllocationPoints points) {
		logger.info("Running UserService.firstAllotment");
		try {
			Date date = new Date();
			if (points.getWorkoutPoints() <= 15) {
				logger.info("Running UserService.firstAllotment: allot workout plan 1 for user - " + userId);
				userRepository.updateCurrentWorkoutPlan(planRepository.findById(1).get(), date, userId);
			} else if (points.getWorkoutPoints() > 15 && points.getWorkoutPoints() < 40) {
				logger.info("Running UserService.firstAllotment: allot workout plan 2 for user - " + userId);
				userRepository.updateCurrentWorkoutPlan(planRepository.findById(2).get(), date, userId);
			} else if (points.getWorkoutPoints() >= 40 && points.getWorkoutPoints() < 60) {
				logger.info("Running UserService.firstAllotment: allot workout plan 3 for user - " + userId);
				userRepository.updateCurrentWorkoutPlan(planRepository.findById(3).get(), date, userId);
			} else {
				logger.info("Running UserService.firstAllotment: allot workout plan 4 for user - " + userId);
				userRepository.updateCurrentWorkoutPlan(planRepository.findById(4).get(), date, userId);
			}

			if (points.getWorkoutPoints() <= 15) {
				logger.info("Running UserService.firstAllotment: allot diet plan 1 for user - " + userId);
				userRepository.updateCurrentDietPlan(planRepository.findById(5).get(), date, userId);
			} else if (points.getWorkoutPoints() > 15 && points.getWorkoutPoints() < 30) {
				logger.info("Running UserService.firstAllotment: allot diet plan 2 for user - " + userId);
				userRepository.updateCurrentDietPlan(planRepository.findById(6).get(), date, userId);
			} else {
				logger.info("Running UserService.firstAllotment: allot diet plan 3 for user - " + userId);
				userRepository.updateCurrentDietPlan(planRepository.findById(7).get(), date, userId);
			}
			logger.info("Running UserService.firstAllotment: allotment done for user - " + userId);
			return true;
		} catch (Exception e) {
			logger.error("UserService.firstAllotment : cannot allot plan for user: " + userId);
			System.out.println(e);
			return false;
		}
	}

	@Override
	public User login(String userName, String password) {
		logger.info("Running UserService.login: logging in user - " + userName);
		String DBpassword = userRepository.findPasswordByUsername(userName);
		if (password.equals(DBpassword)) {
			User user = userRepository.findByUsername(userName);
			logger.info("Running UserService.login: logged in user - " + userName);
			return user;
		}
		logger.warn("Running UserService.login: unknown user - "+userName);
		return null;
	}

	@Override
	public List<Allotment> viewWorkoutPlanHistory(DateQueryType queryType, Date date, int userId) {

		if (queryType == DateQueryType.DEFAULT) {
			logger.info("UserService.viewWorkoutPlanHistory for user : " + userId + " - default");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserId(user);
		} else if (queryType == DateQueryType.BEFORE) {
			logger.info("UserService.viewWorkoutPlanHistory for user : " + userId + " - BEFORE");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserIdAndBeforeDate(date, user);
		} else if (queryType == DateQueryType.AFTER) {
			logger.info("UserService.viewWorkoutPlanHistory for user : " + userId + " - AFTER");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserIdAndAfterDate(date, user);
		}
		logger.error("UserService.viewWorkoutPlanHistory: incorrect query type");
		return null;
	}

	@Override
	public List<UserWorkoutRecord> viewWorkoutActivity(DateQueryType queryType, Date date, int userId) {

		if (queryType == DateQueryType.DEFAULT) {
			logger.info("UserService.viewWorkoutActivity for user : " + userId + " - default");
			User user = userRepository.findById(userId).get();

			return userWorkoutRecordRepository.findByUserId(user);
		} else if (queryType == DateQueryType.BEFORE) {
			logger.info("UserService.viewWorkoutActivity for user : " + userId + " - BEFORE");
			User user = userRepository.findById(userId).get();

			List<Allotment> allotments = allotmentRepository.findAllotmentsByUserIdAndBeforeDate(date, user);
			List<UserWorkoutRecord> records = new ArrayList<UserWorkoutRecord>();

			for (Allotment allotment : allotments) {
				records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId(),
						ExerciseStatus.COMPLETE));
				records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId(),
						ExerciseStatus.INCOMPLETE));
			}
			return records;
		} else if (queryType == DateQueryType.AFTER) {
			logger.info("UserService.viewWorkoutActivity for user : " + userId + " - AFTER");
			User user = userRepository.findById(userId).get();

			List<Allotment> allotments = allotmentRepository.findAllotmentsByUserIdAndBeforeDate(date, user);
			List<UserWorkoutRecord> records = new ArrayList<UserWorkoutRecord>();

			for (Allotment allotment : allotments) {
				records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId(),
						ExerciseStatus.COMPLETE));
				records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId(),
						ExerciseStatus.INCOMPLETE));
			}
			return records;
		}
		logger.error("UserService.viewWorkoutActivity: incorrect query type");
		return null;
	}

	public List<UserWorkoutRecord> viewCurrentWorkoutActivity(int userId) {
		User user = userRepository.findById(userId).get();
		if (user != null) {
			logger.info("UserService.viewCurrentWorkoutActivity for user : " + userId );
			Allotment currAllotment = allotmentRepository.findFirstByOrderByAllotmentIdDesc(user.getUserId());
			List<UserWorkoutRecord> records = new ArrayList<UserWorkoutRecord>();
			records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, currAllotment.getAllotmentId(),
					ExerciseStatus.COMPLETE));
			records.addAll(userWorkoutRecordRepository.findByUserIdAndAllotment(user, currAllotment.getAllotmentId(),
					ExerciseStatus.INCOMPLETE));
			return records;
		}
		logger.error("UserService.viewCurrentWorkoutActivity: User " + userId+ " does not exist");
		return null;
	}

	@Override
	public List<Allotment> viewDietPlanHistory(DateQueryType queryType, Date date, int userId) {
		if (queryType == DateQueryType.DEFAULT) {
			logger.info("UserService.viewDietPlanHistory for user : " + userId + " - DEFAULT");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserId(user);
		} else if (queryType == DateQueryType.BEFORE) {
			logger.info("UserService.viewDietPlanHistory for user : " + userId + " - BEFORE");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserIdAndBeforeDate(date, user);
		} else if (queryType == DateQueryType.AFTER) {
			logger.info("UserService.viewDietPlanHistory for user : " + userId + " - AFTER");
			User user = userRepository.findById(userId).get();
			return allotmentRepository.findAllotmentsByUserIdAndAfterDate(date, user);
		}
		logger.error("UserService.viewDietPlanHistory: incorrect query type");
		return null;
	}

	@Override
	public List<UserDietRecord> viewDietActivity(DateQueryType queryType, Date date, int userId) {

		if (queryType == DateQueryType.DEFAULT) {
			logger.info("UserService.viewDietActivity for user : " + userId + " - DEFAULT");
			User user = userRepository.findById(userId).get();

			return userDietRecordRepository.findByUserId(user);
		} else if (queryType == DateQueryType.BEFORE) {
			logger.info("UserService.viewDietActivity for user : " + userId + " - BEFORE");
			User user = userRepository.findById(userId).get();

			List<Allotment> allotments = allotmentRepository.findAllotmentsByUserIdAndBeforeDate(date, user);
			List<UserDietRecord> records = new ArrayList<UserDietRecord>();

			for (Allotment allotment : allotments) {
				records.addAll(userDietRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId()));
			}
			return records;
		} else if (queryType == DateQueryType.AFTER) {
			logger.info("UserService.viewDietActivity for user : " + userId + " - AFTER");
			User user = userRepository.findById(userId).get();

			List<Allotment> allotments = allotmentRepository.findAllotmentsByUserIdAndAfterDate(date, user);
			List<UserDietRecord> records = new ArrayList<UserDietRecord>();

			for (Allotment allotment : allotments) {
				records.addAll(userDietRecordRepository.findByUserIdAndAllotment(user, allotment.getAllotmentId()));
			}
			return records;
		}
		logger.error("UserService.viewDietActivity: incorrect query type");
		return null;
	}

	@Override
	public List<UserDietRecord> viewCurrentDietActivity(int userId) {
		logger.info("UserService.viewCurrentDietActivity for user : " + userId );
		User user = userRepository.findById(userId).get();
		if (user != null) {
			Allotment currAllotment = allotmentRepository.findFirstByOrderByAllotmentIdDesc(user.getUserId());
			return userDietRecordRepository.findByUserIdAndAllotment(user, currAllotment.getAllotmentId());
		}
		logger.error("UserService.viewCurrentDietActivity: User " + userId+ " does not exist");
		return null;
	}

	@Override
	public Boolean UpdateExerciseStatus(int userId, int day, ExerciseStatus status, int setsCompleted, int exId) {
		try {
			logger.info("UserService.UpdateExerciseStatus for user : " + userId );
			User user = userRepository.findById(userId).get();

			UserWorkoutRecord userWorkoutRecord = new UserWorkoutRecord();
			userWorkoutRecord.setUser(user);
			userWorkoutRecord.setStatus(status);
			userWorkoutRecord.setSetsCompleted(setsCompleted);
			userWorkoutRecord.setWorkoutId(user.getcurrentWorkoutPlan().getPlanId());

			PlanDetailPK planDetailPK = new PlanDetailPK();
			planDetailPK.setDay(day);
			planDetailPK.setPlanId(user.getcurrentWorkoutPlan().getPlanId());
			userWorkoutRecord.setPlanDetail(planDetailRepository.findById(planDetailPK).get());

			UserWorkoutRecordPK userWorkoutRecordPK = new UserWorkoutRecordPK();
			userWorkoutRecordPK.setDay(day);
			userWorkoutRecordPK.setExId(exId);
			userWorkoutRecordPK.setAllotmentId(
					allotmentRepository.findFirstByOrderByAllotmentIdDesc(user.getUserId()).getAllotmentId());
			userWorkoutRecord.setId(userWorkoutRecordPK);

			userWorkoutRecordRepository.save(userWorkoutRecord);
			logger.info("UserService.UpdateExerciseStatus for user : " + userId +"- successful");
			return true;
		} catch (Exception e) {
			logger.error("UserService.UpdateExerciseStatus for user : " + userId +"- failed");
			System.out.println(e);
			return false;
		}
	}

	@Override
	@Transactional
	public Boolean UpdateFoodEaten(int userId, int day, int calorieIntake) {
		try {
			logger.info("UserService.UpdateFoodEaten for user : " + userId );
			User user = userRepository.findById(userId).get();
			UserDietRecord userDietRecord = new UserDietRecord();
			userDietRecord.setUser(user);

			PlanDetailPK planDetailPK = new PlanDetailPK();
			planDetailPK.setDay(day);
			planDetailPK.setPlanId(user.getcurrentWorkoutPlan().getPlanId());
			userDietRecord.setPlanDetail(planDetailRepository.findById(planDetailPK).get());

			userDietRecord.setCalorieIntake(calorieIntake);
			userDietRecord.setDiet_id(user.getCurrentDietPlan().getPlanId());

			UserDietRecordPK userDietRecordPK = new UserDietRecordPK();
			userDietRecordPK.setDay(day);
			int allotmentId = allotmentRepository.findFirstByOrderByAllotmentIdDesc(user.getUserId()).getAllotmentId();
			userDietRecordPK.setAllotmentId(allotmentId);
			userDietRecord.setId(userDietRecordPK);

			userDietRecordRepository.save(userDietRecord);
			logger.info("UserService.UpdateFoodEaten for user : " + userId +"- successful");
			return true;
		} catch (Exception e) {
			logger.error("UserService.UpdateFoodEaten for user : " + userId +"- failed");
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public Boolean UpdateBasicInfo(int userId, int newWeight, int newHeight, int newAge) {
		try {
			logger.info("UserService.UpdateBasicInfo for user : " + userId );
			User user = userRepository.findById(userId).get();
			if (user.getHeightCms() != newHeight) {
				userRepository.updateHeight(newHeight, userId);
			}
			if (user.getWeightKgs() != newWeight) {
				userRepository.updateWeight(newWeight, userId);
			}
			if (user.getAge() != newAge) {
				userRepository.updateAge(newAge, userId);
			}
			logger.info("UserService.UpdateBasicInfo for user : " + userId +"- successful");
			return true;
		} catch (Exception e) {
			logger.error("UserService.UpdateBasicInfo for user : " + userId +"- failed");
			System.out.println(e);
			return false;
		}
	}

	@Override
	public List<PlanDetail> viewCurrentPlan(int userId, PlanType type) {
		logger.info("Running UserService.viewCurrentPlan for user : " + userId);
		User user = userRepository.findById(userId).get();
		if (type == PlanType.DIET) {
			logger.info("UserService.viewCurrentPlan for user : " + userId +"- DIET");
			return planDetailRepository.findByPlanId(user.getCurrentDietPlan().getPlanId());
		} else if (type == PlanType.WORKOUT){
			logger.info("UserService.viewCurrentPlan for user : " + userId +"- WORKOUT");
			return planDetailRepository.findByPlanId(user.getcurrentWorkoutPlan().getPlanId());
		}
		logger.error("UserService.viewCurrentPlan for user : " + userId +"- Incorrect query type");
		return null;
	}

}
