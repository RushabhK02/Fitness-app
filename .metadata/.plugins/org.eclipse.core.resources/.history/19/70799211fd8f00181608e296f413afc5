package com.f2f.app.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.f2f.app.constants.DateQueryType;
import com.f2f.app.constants.PlanType;
import com.f2f.app.models.AllocationPoints;
import com.f2f.app.models.Allotment;
import com.f2f.app.models.BasicInfo;
import com.f2f.app.models.CalorieDetails;
import com.f2f.app.models.Exercise;
import com.f2f.app.models.ExerciseDetails;
import com.f2f.app.models.LoginCredentials;
import com.f2f.app.models.PlanDetail;
import com.f2f.app.models.User;
import com.f2f.app.models.UserDietRecord;
import com.f2f.app.models.UserWorkoutRecord;
import com.f2f.app.service.UserService;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/")
public class UserController {

	private static Logger logger = LogManager.getLogger();
	@Autowired
	private UserService userService;

	@PostMapping(value = "/user/{userId}/assign-initial-plan", produces = { "application/json" })
	Boolean assignInitialPreset(@PathVariable int userId, @RequestBody AllocationPoints points) {
		logger.info("Assigning diet and workout plans to user with id:" + userId + ".");
		return userService.firstAllotment(userId, points);
	}

	@GetMapping(value = "/user/{userId}/current/allotment", produces = { "application/json" })
	Allotment getCurrentAllotment(@PathVariable(value = "userId") int userId) {
		logger.info("UserController.getCurrentAllotment:" + userId);
		return userService.viewCurrentAllotment(userId);
	}

	@GetMapping(value = "/exercise/{exId}", produces = { "application/json" })
	Exercise getExerciseInfo(@PathVariable(value = "exId") int exId) {
		logger.info("UserController.getExerciseInfo:" + exId);
		return userService.getExerciseInfo(exId);
	}

	@PostMapping(value = "login", produces = { "application/json" })
	User loginUser(@RequestBody LoginCredentials credentials) {
		logger.info("User trying to log in.");
		return userService.login(credentials.getUsername(), credentials.getPassword());
	}

	@PostMapping(value = "signup", produces = { "application/json" })
	User signup(@RequestBody User newUser) {
		logger.info("New User signing in.");
		return userService.signup(newUser);
	}

	@PutMapping(value = "/user/{userId}/update/info", produces = { "application/json" })
	Boolean updateBasicInfo(@PathVariable int userId, @RequestBody BasicInfo newBasicInfo) {
		logger.info("UserController.updateBasicInfo:" + userId + "-" + newBasicInfo);
		return userService.updateBasicInfo(userId, newBasicInfo.getWeight(), newBasicInfo.getHeight(),
				newBasicInfo.getAge());

	}

	@PutMapping(value = "/user/{userId}/update/diet", produces = { "application/json" })
	Boolean updateCalorieConsumed(@PathVariable int userId, @RequestBody CalorieDetails details) {
		logger.info("UserController.updateCalorieConsumed:" + userId + "-" + details);
		return userService.updateFoodEaten(userId, details.getDay(), details.getCalorieIntake());
	}

	@PutMapping(value = "/user/{userId}/update/exercise", produces = { "application/json" })
	Boolean updateExerciseDone(@PathVariable int userId, @RequestBody ExerciseDetails details) {
		logger.info("UserController.updateExerciseDone:" + userId + "-" + details);
		return userService.updateExerciseStatus(userId, details.getDay(), details.getStatus(),
				details.getSetsCompleted(), details.getExId());
	}

	@GetMapping(value = "/user/{userId}/history/records/diet/current", produces = { "application/json" })
	List<UserDietRecord> viewCurrentDietActivity(@PathVariable int userId) {
		logger.info("UserController.viewCurrentDietActivity:" + userId);
		return userService.viewCurrentDietActivity(userId);
	}

	@GetMapping(value = "/user/{userId}/view/current-plan", produces = { "application/json" })
	List<PlanDetail> viewCurrentPlan(@PathVariable int userId,
			@RequestParam(value = "queryType", required = true) String queryType) {

		if (queryType.equalsIgnoreCase(PlanType.DIET.toString())) {
			logger.info("UserController.viewCurrentPlan:" + userId + "-" + PlanType.DIET.toString());
			return userService.viewCurrentPlan(userId, PlanType.DIET);
		} else {
			logger.info("UserController.viewCurrentPlan:" + userId + "-" + PlanType.DIET.toString());
			return userService.viewCurrentPlan(userId, PlanType.WORKOUT);
		}
	}

	@GetMapping(value = "/user/{userId}/history/records/workout/current", produces = { "application/json" })
	List<UserWorkoutRecord> viewCurrentWorkoutActivity(@PathVariable int userId) {
		logger.info("UserController.viewCurrentWorkoutActivity:" + userId);
		return userService.viewCurrentWorkoutActivity(userId);
	}

	@GetMapping(value = "/user/{userId}/history/records/diet", produces = { "application/json" })
	List<UserDietRecord> viewDietActivity(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {
		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info(
					"UserController.viewDietActivity:" + userId + "-" + DateQueryType.AFTER.toString() + " " + date);
			return userService.viewDietActivity(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info(
					"UserController.viewDietActivity:" + userId + "-" + DateQueryType.BEFORE.toString() + " " + date);
			return userService.viewDietActivity(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("UserController.viewDietActivity:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return userService.viewDietActivity(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("UserController.viewDietPlanHistory : Unknown Query Type");
		return new ArrayList<>();
	}

	@GetMapping(value = "/user/{userId}/history/plan/diet", produces = { "application/json" })
	List<Allotment> viewDietPlanHistory(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {
		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info(
					"UserController.viewDietPlanHistory:" + userId + "-" + DateQueryType.AFTER.toString() + " " + date);
			return userService.viewDietPlanHistory(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info("UserController.viewDietPlanHistory:" + userId + "-" + DateQueryType.BEFORE.toString() + " "
					+ date);
			return userService.viewDietPlanHistory(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("UserController.viewDietPlanHistory:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return userService.viewDietPlanHistory(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("UserController.viewDietPlanHistory : Unknown Query Type");
		return new ArrayList<>();
	}

	@GetMapping(value = "/user/{userId}/history/records/workout", produces = { "application/json" })
	List<UserWorkoutRecord> viewWorkoutActivity(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {
		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info(
					"UserController.viewWorkoutActivity:" + userId + "-" + DateQueryType.AFTER.toString() + " " + date);
			return userService.viewWorkoutActivity(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info("UserController.viewWorkoutActivity:" + userId + "-" + DateQueryType.BEFORE.toString() + " "
					+ date);
			return userService.viewWorkoutActivity(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("UserController.viewWorkoutActivity:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return userService.viewWorkoutActivity(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("UserController.viewWorkoutActivity : Unknown Query Type");
		return new ArrayList<>();
	}

	@GetMapping(value = "/user/{userId}/history/plan/workout", produces = { "application/json" })
	List<Allotment> viewWorkoutPlanHistory(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {
		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info("UserController.viewWorkoutPlanHistory:" + userId + "-" + DateQueryType.AFTER.toString() + " "
					+ date);
			return userService.viewWorkoutPlanHistory(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info("UserController.viewWorkoutPlanHistory:" + userId + "-" + DateQueryType.BEFORE.toString() + " "
					+ date);
			return userService.viewWorkoutPlanHistory(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("UserController.viewWorkoutPlanHistory:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return userService.viewWorkoutPlanHistory(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("UserController.viewWorkoutPlanHistory : Unknown Query Type");
		return new ArrayList<>();
	}
}
