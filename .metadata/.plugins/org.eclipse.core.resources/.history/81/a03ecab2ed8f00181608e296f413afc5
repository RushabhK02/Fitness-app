package com.f2f.app.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.f2f.app.constants.DateQueryType;
import com.f2f.app.constants.ExerciseStatus;
import com.f2f.app.models.Admin;
import com.f2f.app.models.Exercise;
import com.f2f.app.models.PlanCombo;
import com.f2f.app.models.PlanPreset;
import com.f2f.app.models.PlansList;
import com.f2f.app.models.User;
import com.f2f.app.models.UserDietRecord;
import com.f2f.app.models.UserLite;
import com.f2f.app.models.UserWorkoutRecord;
import com.f2f.app.service.AdminService;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/admin/{adminId}")
public class AdminController {

	private static Logger logger = LogManager.getLogger();
	@Autowired
	private AdminService adminService;

	@PutMapping(value = "/user/{userId}/assign")
	Boolean assignNewPreset(@PathVariable int userId, @RequestBody PlanCombo comboPlan) {
		logger.info("AdminController.assignNewPreset:" + comboPlan);
		return adminService.assignPresetToUser(userId, 1, comboPlan.getWorkoutPlan(), comboPlan.getDietPlan());
	}

	@PostMapping(value = "/new/plan")
	Boolean createNewPreset(@RequestBody PlanPreset newPreset) {
		logger.info("AdminController.createNewPreset:" + newPreset);
		return adminService.createNewPreset(newPreset.getPlan(), newPreset.getPlanDetails());
	}

	@DeleteMapping(value = "/delete/plan/{planId}")
	Boolean deletePlanPreset(@PathVariable int planId) {
		logger.info("AdminController.deletePlanPreset:" + planId);
		return adminService.deletePreset(planId);
	}

	@GetMapping()
	Admin getAdminInfo(@PathVariable int adminId) {
		logger.info("AdminController.getAdminInfo:" + adminId);
		return adminService.login("akash.kadel@wissen.com", "msi");
	}

	@GetMapping(value = "/plans", produces = { "application/json" })
	PlansList getPlans() {
		logger.info("AdminController.getPlans: running");
		return adminService.getPlans();
	}

	@GetMapping(value = "/user/{userId}", produces = { "application/json" })
	User viewClientInfo(@PathVariable int userId) {
		logger.info("AdminController.viewClientInfo:" + userId);
		return adminService.viewClientInfo(userId);
	}
	
	@GetMapping(value="/exercises", produces = {"application/json"})
	List<Exercise> getExercises(){
		logger.info("AdminController.getExercises: running...");
		return adminService.getExercises();
	}

	@GetMapping(value = "/users", produces = { "application/json" })
	List<UserLite> viewClients(@PathVariable int adminId) {
		logger.info("AdminController.viewClients:" + adminId);
		return adminService.viewClients(adminId);
	}

	@GetMapping(value = "/user/{userId}/history/records/diet/current", produces = { "application/json" })
	List<UserDietRecord> viewUserCurrentDietHistory(@PathVariable int userId) {
		logger.info("AdminController.viewUserCurrentDietHistory:" + userId);
		return adminService.viewUserCurrentDietActivity(userId);
	}

	@GetMapping(value = "/user/{userId}/history/records/workout/current", produces = { "application/json" })
	List<UserWorkoutRecord> viewUserCurrentWorkoutHistory(@PathVariable int userId) {
		logger.info("AdminController.viewUserCurrentWorkoutHistory:" + userId);
		return adminService.viewUserCurrentWorkoutActivity(userId);
	}

	@GetMapping(value = "/user/{userId}/history/records/diet/date", produces = { "application/json" })
	List<UserDietRecord> viewUserDietHistory(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {

		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info("AdminController.viewUserDietHistory:" + userId + "-" + DateQueryType.AFTER.toString() + " "
					+ date);
			return adminService.viewUserDietActivity(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info("AdminController.viewUserDietHistory:" + userId + "-" + DateQueryType.BEFORE.toString() + " "
					+ date);
			return adminService.viewUserDietActivity(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("AdminController.viewUserDietHistory:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return adminService.viewUserDietActivity(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("AdminController.viewUserDietHistory : Unknown Query Type");
		return new ArrayList<>();
	}

	@GetMapping(value = "/notifications", produces = { "application/json" })
	List<UserLite> viewUsersWithExpiredPlans(@PathVariable int adminId) {
		logger.info("AdminController.viewUsersWithExpiredPlans:" + adminId);
		return adminService.viewNotifications(adminId);
	}

	@GetMapping(value = "/user/{userId}/history/records/workout/date", produces = { "application/json" })
	List<UserWorkoutRecord> viewUserWorkoutHistory(@PathVariable int userId,
			@RequestParam(value = "queryType", required = false) String queryType,
			@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) @RequestParam(value = "date", required = false) Date date) {

		if (queryType.equalsIgnoreCase(DateQueryType.AFTER.toString())) {
			logger.info("AdminController.viewUserWorkoutHistory:" + userId + "-" + DateQueryType.AFTER.toString() + " "
					+ date);
			return adminService.viewUserWorkoutActivity(DateQueryType.AFTER, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.BEFORE.toString())) {
			logger.info("AdminController.viewUserWorkoutHistory:" + userId + "-" + DateQueryType.BEFORE.toString() + " "
					+ date);
			return adminService.viewUserWorkoutActivity(DateQueryType.BEFORE, date, userId);
		} else if (queryType.equalsIgnoreCase(DateQueryType.DEFAULT.toString())) {
			logger.info("AdminController.viewUserWorkoutHistory:" + userId + "-" + DateQueryType.DEFAULT.toString());
			return adminService.viewUserWorkoutActivity(DateQueryType.DEFAULT, date, userId);
		}
		logger.error("AdminController.viewUserWorkoutHistory : Unknown Query Type");
		return new ArrayList<>();
	}

	@GetMapping(value = "/user/{userId}/history/records/workout/status", produces = { "application/json" })
	List<UserWorkoutRecord> viewUserWorkoutHistoryByStatus(@PathVariable int userId,
			@RequestParam(value = "queryType", required = true) String queryType,
			@RequestParam(value = "status", required = true) String status) {
		queryType = queryType.toUpperCase();
		if (status.equalsIgnoreCase(ExerciseStatus.COMPLETE.toString())) {
			logger.info("AdminController.viewUserWorkoutHistoryByStatus:" + userId + "-"
					+ ExerciseStatus.COMPLETE.toString());
			return adminService.viewUserWorkoutActivityByStatus(DateQueryType.valueOf(queryType),
					ExerciseStatus.COMPLETE, userId);
		}
		if (status.equalsIgnoreCase(ExerciseStatus.INCOMPLETE.toString())) {
			logger.info("AdminController.viewUserWorkoutHistoryByStatus:" + userId + "-"
					+ ExerciseStatus.INCOMPLETE.toString());
			return adminService.viewUserWorkoutActivityByStatus(DateQueryType.valueOf(queryType),
					ExerciseStatus.INCOMPLETE, userId);
		}
		logger.error("AdminController.viewUserWorkoutHistoryByStatus : Unknown Query Type");
		return new ArrayList<>();
	}
}
